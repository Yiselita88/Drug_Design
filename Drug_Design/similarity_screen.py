from pathlib import Path
import os

import pandas as pd
import matplotlib.pyplot as plt
from rdkit import Chem, DataStructs
from rdkit.Chem import (
    PandasTools,
    Draw,
    Descriptors,
    MACCSkeys,
    rdFingerprintGenerator,
)

DATA =  "data"

# Molecules in SMILES format
molecule_smiles = [
    "CC1C2C(C3C(C(=O)C(=C(C3(C(=O)C2=C(C4=C1C=CC=C4O)O)O)O)C(=O)N)N(C)C)O",
    "CC1(C(N2C(S1)C(C2=O)NC(=O)C(C3=CC=C(C=C3)O)N)C(=O)O)C",
    "C1=COC(=C1)CNC2=CC(=C(C=C2C(=O)O)S(=O)(=O)N)Cl",
    "CCCCCCCCCCCC(=O)OCCOC(=O)CCCCCCCCCCC",
    "C1NC2=CC(=C(C=C2S(=O)(=O)N1)S(=O)(=O)N)Cl",
    "CC1=C(C(CCC1)(C)C)C=CC(=CC=CC(=CC(=O)O)C)C",
    "CC1(C2CC3C(C(=O)C(=C(C3(C(=O)C2=C(C4=C1C=CC=C4O)O)O)O)C(=O)N)N(C)C)O",
    "CC1C(CC(=O)C2=C1C=CC=C2O)C(=O)O",
]

# List of molecule names
molecule_names = [
    "Doxycycline",
    "Amoxicilline",
    "Furosemide",
    "Glycol dilaurate",
    "Hydrochlorothiazide",
    "Isotretinoin",
    "Tetracycline",
    "Hemi-cycline D",
]

# # Generate DF for these molecules and add their ROMol objects
molecules = pd.DataFrame({"smiles": molecule_smiles, "name": molecule_names})
PandasTools.AddMoleculeColumnToFrame(molecules, smilesCol="smiles")
PandasTools.RenderImagesInAllDataFrames(True)
# print(molecules.head(2))

# img1 = Draw.MolsToGridImage(
#     molecules["ROMol"].to_list(),
#     molsPerRow=3,
#     subImgSize=(450, 150),
#     legends=molecules["name"].to_list(),
# )

# img1.save("Results/T004_image1.png")

# # Calculate molecular descriptors
molecules["molecule_weight"] = molecules.ROMol.apply(Descriptors.MolWt)
molecules.sort_values(["molecule_weight"], ascending=False, inplace=True)

# print(molecules[["smiles", "name", "molecule_weight"]])

# # Draw the molecules with their molecular weight
# img2 = Draw.MolsToGridImage(
#     molecules["ROMol"],
#     legends=[
#         f"{molecule['name']}: {molecule['molecule_weight']:.2f} Da"
#         for index, molecule in molecules.iterrows()
#     ],
#     subImgSize=(450, 150),
#     molsPerRow=3
# )

# img2.save("Results/T004_mol-molecular_weight.png")


# # MACCS fingerprints generated by rdkit
molecule = molecules["ROMol"][0]
maccs_fp = MACCSkeys.GenMACCSKeys(molecule)
# print(maccs_fp.ToBitString())

# # Applied MACCS fingerprints generator to all molecules
molecules["maccs"] = molecules.ROMol.apply(MACCSkeys.GenMACCSKeys)

# # 2D molecular descriptor: Morgan fingerprint
# generate Morgan fingerprint as integer vector
fpg = rdFingerprintGenerator.GetMorganGenerator(radius=2, fpSize=2048)
circular_int_fp = fpg.GetCountFingerprint(molecule)
# print(circular_int_fp)
# print(f"Print non-zero elements:\n{circular_int_fp.GetNonzeroElements()}")

# generate the Morgan fingerprint as a bit vector
circular_bit_fp = fpg.GetFingerprint(molecule)
# print(circular_bit_fp)
# print(f"Print top 400 fingerprint bits:\n{circular_bit_fp.ToBitString()[:400]}")

# Apply Morgan fingerprints (as bit vector) to all molecules
molecules["morgan"] = molecules["ROMol"].map(fpg.GetFingerprint)

# # Calculate molecular similarity
molecule1 = molecules["ROMol"][0]
molecule2 = molecules["ROMol"][1]

maccs_fp1 = MACCSkeys.GenMACCSKeys(molecule1)
maccs_fp2 = MACCSkeys.GenMACCSKeys(molecule2)

# # Calculate the Tanimoto coefficiente between two different molecules
# print(DataStructs.TanimotoSimilarity(maccs_fp1, maccs_fp2))
# print(DataStructs.TanimotoSimilarity(maccs_fp1, maccs_fp1))

# # ---- MACCS fingerprints: Tanimoto similarity and Dice similarity ---- # # 
molecule_query = molecules["maccs"][0]
molecule_list = molecules["maccs"].to_list()
# calculate similarity values between query and list elements
molecules["tanimoto_maccs"] = DataStructs.BulkTanimotoSimilarity(molecule_query, molecule_list)
molecules["dice_maccs"] = DataStructs.BulkDiceSimilarity(molecule_query, molecule_list)

# preview = molecules.sort_values(["tanimoto_maccs"], ascending=False).reset_index()
# print(preview[["name", "tanimoto_maccs", "dice_maccs"]])

def draw_ranked_molecules(molecules, sort_by_column):
    molecules_sorted = molecules.sort_values([sort_by_column], ascending=False).reset_index()
    return Draw.MolsToGridImage(
        molecules_sorted["ROMol"],
        legends=[
            f"#{index+1} {molecule['name']}, similarity={molecule[sort_by_column]:.2f}"
            for index, molecule in molecules_sorted.iterrows()
        ],
        molsPerRow=3,
        subImgSize=(450, 150),
    )
img3 = draw_ranked_molecules(molecules, "tanimoto_maccs")
# img3.save("Results/tanimoto_rank.png")

# add tanimoto and dice similarity between the morgan fingerprint to the df
molecule_query = molecules["morgan"][0]
molecule_list = molecules["morgan"].to_list()

molecules["tanimoto_morgan"] = DataStructs.BulkTanimotoSimilarity(molecule_query, molecule_list)
molecules["dice_morgan"] = DataStructs.BulkDiceSimilarity(molecule_query, molecule_list)

preview = molecules.sort_values(["tanimoto_morgan"], ascending=False).reset_index()
# print(preview[["name", "tanimoto_morgan", "dice_morgan", "tanimoto_maccs", "dice_maccs"]])

# img4 = draw_ranked_molecules(molecules, "tanimoto_morgan")
# img4.save("Results/tanimoto_morgan.png")

# # # --- compare tanimoto similarities based on morgan and maccs fingerprints --- # #
# fig, ax = plt.subplots(figsize=(6, 6))
# molecules.plot("tanimoto_maccs", "tanimoto_morgan", kind="scatter", ax=ax)
# ax.plot([0, 1], [0, 1], "k--")
# ax.set_xlabel("Tanimoto (MACCS)")
# ax.set_ylabel("Tanimoto (Morgan)")

# # Virtual screening using similarity search
molecule_dataset = pd.read_csv("EGFR_compounds_lipinski.csv", usecols=["molecule_chembl_id", "smiles", "pIC50"])
# print(f"Number of molecules in dataset: {len(molecule_dataset)}")
# print(molecule_dataset.head(5))

query = Chem.MolFromSmiles("COC1=C(OCCCN2CCOCC2)C=C2C(NC3=CC(Cl)=C(F)C=C3)=NC=NC2=C1")

# generate MACCS and Morgan for fingerprints for the query molecule
maccs_fp_query = MACCSkeys.GenMACCSKeys(query)
circular_fp_query = fpg.GetCountFingerprint(query)

# Generate MACCS and Morgan fingerprints for all molecules in our dataset
PandasTools.AddMoleculeColumnToFrame(molecule_dataset, "smiles")
circular_fp_list = molecule_dataset["ROMol"].apply(fpg.GetCountFingerprint).to_list()
maccs_fp_list = molecule_dataset["ROMol"].apply(MACCSkeys.GenMACCSKeys).to_list()

# Calculate tanimoto similarity between the query molecule and all molecules of our dataset
molecule_dataset["tanimoto_maccs"] = DataStructs.BulkTanimotoSimilarity(maccs_fp_query, maccs_fp_list)
molecule_dataset["tanimoto_morgan"] = DataStructs.BulkTanimotoSimilarity(circular_fp_query, circular_fp_list)

# calculate Dice similarity 
molecule_dataset["dice_maccs"] = DataStructs.BulkDiceSimilarity(maccs_fp_query, maccs_fp_list)
molecule_dataset["dice_morgan"] = DataStructs.BulkDiceSimilarity(circular_fp_query, circular_fp_list)

# print(molecule_dataset[["smiles", "tanimoto_maccs", "tanimoto_morgan", "dice_maccs", "dice_morgan"]].head(5))
# show all columns
# print(molecule_dataset.head(3))

# fig, axes = plt.subplots(figsize=(10, 6), nrows=2, ncols=2)
# molecule_dataset.hist(["tanimoto_maccs"], ax=axes[0, 0])
# molecule_dataset.hist(["tanimoto_morgan"], ax=axes[0, 1])
# molecule_dataset.hist(["dice_maccs"], ax=axes[1, 0])
# molecule_dataset.hist(["dice_morgan"], ax=axes[1, 1])
# axes[1, 0].set_xlabel("similarity value")
# axes[1, 0].set_ylabel("# molecules")
# plt.savefig("Results/tanimoto_dice_histograms.png")

# fig, axes = plt.subplots(figsize=(12, 6), nrows=1, ncols=2)

# molecule_dataset.plot("tanimoto_maccs", "dice_maccs", kind="scatter", ax=axes[0])
# axes[0].plot([0, 1], [0, 1], "k--")
# axes[0].set_xlabel("Tanimoto (MACCS)")
# axes[0].set_ylabel("Dice (MACCS)")

# molecule_dataset.plot("tanimoto_morgan", "dice_morgan", kind="scatter", ax=axes[1])
# axes[1].plot([0, 1], [0, 1], "k--")
# axes[1].set_xlabel("Tanimoto (Morgan)")
# axes[1].set_ylabel("Dice (Morgan)")
# plt.savefig("Results/fingerprints_similarity_comparison.png")

# print(molecule_dataset.sort_values(["tanimoto_morgan"], ascending=False).head(3))

# # # show the query and its most similar molecules alongside the molecules' bioactivities
# top_n_molecules = 10
# top_molecules = molecule_dataset.sort_values(["tanimoto_morgan"], ascending=False).reset_index()
# top_molecules = top_molecules[:top_n_molecules]
# legends = [
#     f"#{index+1} {molecule['molecule_chembl_id']}, pIC50={molecule['pIC50']:.2f}"
#     for index, molecule in top_molecules.iterrows()
# ]
# img5 = Chem.Draw.MolsToGridImage(
#     mols=[query] + top_molecules["ROMol"].tolist(),
#     legends=(["Gefitinib"] + legends),
#     molsPerRow=3,
#     subImgSize=(450, 150),
# )
# img5.save("Results/query+similar.png") 

def get_enrichment_data(molecule, similarity_measure, pic50_cutoff):
    # get number of molecules in data set
    molecules_all = len(molecules)

    # get number of active molecules in data set
    actives_all = sum(molecules["pIC50"] >= pic50_cutoff) 
    
    # Initialize a list that will hold the counter for actives and molecules while iterating through our dataset
    actives_counter_list = []

    # Initialize counter for actives
    actives_counter = 0

    # sort molecules by selected similarity measure
    molecules.sort_values([similarity_measure], ascending=False, inplace=True)

    for value in molecules["pIC50"]:
        if value >= pic50_cutoff:
            actives_counter += 1
        actives_counter_list.append(actives_counter)

    molecules_percentage_list = [i / molecules_all for i in actives_counter_list]

    actives_percentage_list = [i / actives_all for i in actives_counter_list]

    enrichment = pd.DataFrame(
        {
            "% ranked dataset": molecules_percentage_list,
            "% true actives identified": actives_percentage_list
        }
    )

    return enrichment

pic50_cutoff = 6.3
    

# # get enrichement for MACCS and Morgan fingerprints
similarity_measures = ["tanimoto_maccs", "tanimoto_morgan"]
enrichment_data = {
    similarity_measures: get_enrichment_data(molecule_dataset, similarity_measure, pic50_cutoff)
    for similarity_measure in similarity_measures
}

# # example of enrichment data
print(enrichment_data["tanimoto_maccs"].head())