from pathlib import Path
import os

import pandas as pd
import matplotlib.pyplot as plt
from rdkit import Chem, DataStructs
from rdkit.Chem import (
    PandasTools,
    Draw,
    Descriptors,
    MACCSkeys,
    rdFingerprintGenerator,
)

DATA =  "data"

# Molecules in SMILES format
molecule_smiles = [
    "CC1C2C(C3C(C(=O)C(=C(C3(C(=O)C2=C(C4=C1C=CC=C4O)O)O)O)C(=O)N)N(C)C)O",
    "CC1(C(N2C(S1)C(C2=O)NC(=O)C(C3=CC=C(C=C3)O)N)C(=O)O)C",
    "C1=COC(=C1)CNC2=CC(=C(C=C2C(=O)O)S(=O)(=O)N)Cl",
    "CCCCCCCCCCCC(=O)OCCOC(=O)CCCCCCCCCCC",
    "C1NC2=CC(=C(C=C2S(=O)(=O)N1)S(=O)(=O)N)Cl",
    "CC1=C(C(CCC1)(C)C)C=CC(=CC=CC(=CC(=O)O)C)C",
    "CC1(C2CC3C(C(=O)C(=C(C3(C(=O)C2=C(C4=C1C=CC=C4O)O)O)O)C(=O)N)N(C)C)O",
    "CC1C(CC(=O)C2=C1C=CC=C2O)C(=O)O",
]

# List of molecule names
molecule_names = [
    "Doxycycline",
    "Amoxicilline",
    "Furosemide",
    "Glycol dilaurate",
    "Hydrochlorothiazide",
    "Isotretinoin",
    "Tetracycline",
    "Hemi-cycline D",
]

# # Generate DF for these molecules and add their ROMol objects
molecules = pd.DataFrame({"smiles": molecule_smiles, "name": molecule_names})
PandasTools.AddMoleculeColumnToFrame(molecules, smilesCol="smiles")
PandasTools.RenderImagesInAllDataFrames(True)
# print(molecules.head(2))

# img1 = Draw.MolsToGridImage(
#     molecules["ROMol"].to_list(),
#     molsPerRow=3,
#     subImgSize=(450, 150),
#     legends=molecules["name"].to_list(),
# )

# img1.save("Results/T004_image1.png")

# # Calculate molecular descriptors
molecules["molecule_weight"] = molecules.ROMol.apply(Descriptors.MolWt)
molecules.sort_values(["molecule_weight"], ascending=False, inplace=True)

# print(molecules[["smiles", "name", "molecule_weight"]])

# # Draw the molecules with their molecular weight
# img2 = Draw.MolsToGridImage(
#     molecules["ROMol"],
#     legends=[
#         f"{molecule['name']}: {molecule['molecule_weight']:.2f} Da"
#         for index, molecule in molecules.iterrows()
#     ],
#     subImgSize=(450, 150),
#     molsPerRow=3
# )

# img2.save("Results/T004_mol-molecular_weight.png")


# # MACCS fingerprints generated by rdkit
molecule = molecules["ROMol"][0]
maccs_fp = MACCSkeys.GenMACCSKeys(molecule)
# print(maccs_fp.ToBitString())

# # Applied MACCS fingerprints generator to all molecules
molecules["maccs"] = molecules.ROMol.apply(MACCSkeys.GenMACCSKeys)

# # 2D molecular descriptor: Morgan fingerprint
# generate Morgan fingerprint as integer vector
fpg = rdFingerprintGenerator.GetMorganGenerator(radius=2, fpSize=2048)
circular_int_fp = fpg.GetCountFingerprint(molecule)
# print(circular_int_fp)
# print(f"Print non-zero elements:\n{circular_int_fp.GetNonzeroElements()}")

# generate the Morgan fingerprint as a bit vector
circular_bit_fp = fpg.GetFingerprint(molecule)
# print(circular_bit_fp)
# print(f"Print top 400 fingerprint bits:\n{circular_bit_fp.ToBitString()[:400]}")

# Apply Morgan fingerprints (as bit vector) to all molecules
molecules["morgan"] = molecules["ROMol"].map(fpg.GetFingerprint)

# # Calculate molecular similarity
molecule1 = molecules["ROMol"][0]
molecule2 = molecules["ROMol"][1]

maccs_fp1 = MACCSkeys.GenMACCSKeys(molecule1)
maccs_fp2 = MACCSkeys.GenMACCSKeys(molecule2)

# # Calculate the Tanimoto coefficiente between two different molecules
# print(DataStructs.TanimotoSimilarity(maccs_fp1, maccs_fp2))
# print(DataStructs.TanimotoSimilarity(maccs_fp1, maccs_fp1))

# # ---- MACCS fingerprints: Tanimoto similarity and Dice similarity ---- # # 
molecule_query = molecules["maccs"][0]
molecule_list = molecules["maccs"].to_list()
# calculate similarity values between query and list elements
molecules["tanimoto_maccs"] = DataStructs.BulkTanimotoSimilarity(molecule_query, molecule_list)
molecules["dice_maccs"] = DataStructs.BulkDiceSimilarity(molecule_query, molecule_list)

# preview = molecules.sort_values(["tanimoto_maccs"], ascending=False).reset_index()
# print(preview[["name", "tanimoto_maccs", "dice_maccs"]])

def draw_ranked_molecules(molecules, sort_by_column):
    molecules_sorted = molecules.sort_values([sort_by_column], ascending=False).reset_index()
    return Draw.MolsToGridImage(
        molecules_sorted["ROMol"],
        legends=[
            f"#{index+1} {molecule['name']}, similarity={molecule[sort_by_column]:.2f}"
            for index, molecule in molecules_sorted.iterrows()
        ],
        molsPerRow=3,
        subImgSize=(450, 150),
    )
img3 = draw_ranked_molecules(molecules, "tanimoto_maccs")
# img3.save("Results/tanimoto_rank.png")

# add tanimoto and dice similarity between the morgan fingerprint to the df
molecule_query = molecules["morgan"][0]
molecule_list = molecules["morgan"].to_list()

molecules["tanimoto_morgan"] = DataStructs.BulkTanimotoSimilarity(molecule_query, molecule_list)
molecules["dice_morgan"] = DataStructs.BulkDiceSimilarity(molecule_query, molecule_list)

preview = molecules.sort_values(["tanimoto_morgan"], ascending=False).reset_index()
print(preview[["name", "tanimoto_morgan", "dice_morgan", "tanimoto_maccs", "dice_maccs"]])

# img4 = draw_ranked_molecules(molecules, "tanimoto_morgan")
# img4.save("Results/tanimoto_morgan.png")

# # --- compare tanimoto similarities based on morgan and maccs fingerprints --- # #
